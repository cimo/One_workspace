{"remainingRequest":"/home/user_1/root/system/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/user_1/root/system/src/components/ContainerCommand.vue?vue&type=style&index=0&id=cafd0a8c&lang=scss&scoped=true&","dependencies":[{"path":"/home/user_1/root/system/src/components/ContainerCommand.vue","mtime":1612799792406},{"path":"/home/user_1/root/system/node_modules/css-loader/dist/cjs.js","mtime":1612517736416},{"path":"/home/user_1/root/system/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1612802232969},{"path":"/home/user_1/root/system/node_modules/postcss-loader/src/index.js","mtime":1612517736814},{"path":"/home/user_1/root/system/node_modules/sass-loader/dist/cjs.js","mtime":1612517748789},{"path":"/home/user_1/root/system/node_modules/cache-loader/dist/cjs.js","mtime":1612517717532},{"path":"/home/user_1/root/system/node_modules/vue-loader/lib/index.js","mtime":1612802232969}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5jb21tYW5kX2NvbXBvbmVudCB7CiAgICBkaXNwbGF5OiBibG9jazsKICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgIHRvcDogMjhweDsKICAgIGJvdHRvbTogMDsKICAgIGxlZnQ6IDA7CiAgICByaWdodDogMDsKICAgIHBhZGRpbmc6IDEwcHg7CgogICAgLnNlY3Rpb24gewogICAgICAgIG1hcmdpbi1ib3R0b206IDIwcHg7CgogICAgICAgIC5sZWZ0IHsKICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogICAgICAgICAgICB3aWR0aDogNzAlOwogICAgICAgIH0KCiAgICAgICAgLnJpZ2h0IHsKICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogICAgICAgICAgICB3aWR0aDogMzAlOwogICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICAgICAgfQogICAgfQp9Cg=="},{"version":3,"sources":["ContainerCommand.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ContainerCommand.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <div class=\"command_component\">\r\n        <div class=\"section\">\r\n            <div class=\"left\">\r\n                <p>Start a container</p>\r\n            </div>\r\n            <div class=\"right\">\r\n                <div class=\"button_cmd_window cmd\">Start</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"section\">\r\n            <div class=\"left\">\r\n                <p>Restart a container</p>\r\n            </div>\r\n            <div class=\"right\">\r\n                <div class=\"button_cmd_window cmd\">Restart</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"section\">\r\n            <div class=\"left\">\r\n                <p>Stop a container</p>\r\n            </div>\r\n            <div class=\"right\">\r\n                <div class=\"button_cmd_window cmd\">Stop</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"section\">\r\n            <p>Status:</p>\r\n            <pre class=\"status\"></pre>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import Helper from \"@/assets/js/Helper.js\";\r\n    import Sio from \"@/assets/js/Sio.js\";\r\n\r\n    export default {\r\n        name: \"ContainerCommandComponent\",\r\n        //components: {},\r\n        computed: {},\r\n        methods: {\r\n            _findParent: Helper.findParent,\r\n            _currentWindowElement: Helper.currentWindowElement,\r\n            _checkStatus(containerName) {\r\n                if (Object.keys(this.windowComponentList).length > 0) {\r\n                    this.intervalStatusList[containerName] = setInterval(() => {\r\n                        Sio.sendMessage(\"t_exec_i\", {\r\n                            closeEnabled: false,\r\n                            tag: `${containerName}_status`,\r\n                            cmd: `docker ps --filter \"name=${containerName}\" --format \"{{.Status}}\"`\r\n                        });\r\n                    }, 1000);\r\n\r\n                    Sio.readMessage(`t_exec_o_${containerName}_status`, (data) => {\r\n                        if (this.commandStatusList[containerName] < 0) {\r\n                            const result = data.out !== undefined ? data.out : data.err;\r\n\r\n                            if (result !== undefined && result.indexOf(\"Up \") !== -1)\r\n                                this.elementStatusList[containerName].innerHTML = \"Running...\";\r\n                        }\r\n                    });\r\n                }\r\n            },\r\n            init(windowComponent) {\r\n                const currentWindowElement = this._currentWindowElement(windowComponent);\r\n\r\n                if (currentWindowElement !== null) {\r\n                    this.windowComponentList[currentWindowElement.containerName] = windowComponent;\r\n                    this.buttonCommandList[currentWindowElement.containerName] = this.windowComponentList[currentWindowElement.containerName].querySelectorAll(\".command_component .right .cmd\");\r\n                    this.elementStatusList[currentWindowElement.containerName] = this.windowComponentList[currentWindowElement.containerName].querySelector(\".command_component .status\");\r\n                    this.commandStatusList[currentWindowElement.containerName] = -1;\r\n\r\n                    this._checkStatus(currentWindowElement.containerName);\r\n                }\r\n            },\r\n            clickLogic(event) {\r\n                const windowComponent = this._findParent(event.target, [\"command_component\"], [\"window_component\"]);\r\n                const currentWindowElement = this._currentWindowElement(windowComponent);\r\n\r\n                if (currentWindowElement !== null) {\r\n                    this.windowComponentList[currentWindowElement.containerName] = windowComponent;\r\n\r\n                    if (event.target.classList.contains(\"cmd\") === true) {\r\n                        const index = Array.from(this.buttonCommandList[currentWindowElement.containerName]).indexOf(event.target);\r\n\r\n                        if (index === 0) {\r\n                            Sio.sendMessage(\"t_exec_i\", {\r\n                                tag: `${currentWindowElement.containerName}_command`,\r\n                                cmd: `docker start ${currentWindowElement.containerName}`\r\n                            });\r\n\r\n                            this.elementStatusList[currentWindowElement.containerName].innerHTML = \"Starting...\";\r\n                            this.commandStatusList[currentWindowElement.containerName] = index;\r\n                        }\r\n                        else if (index === 1) {\r\n                            Sio.sendMessage(\"t_exec_i\", {\r\n                                tag: `${currentWindowElement.containerName}_command`,\r\n                                cmd: `docker restart ${currentWindowElement.containerName}`\r\n                            });\r\n\r\n                            this.elementStatusList[currentWindowElement.containerName].innerHTML = \"Restarting...\";\r\n                            this.commandStatusList[currentWindowElement.containerName] = index;\r\n                        }\r\n                        else if (index === 2) {\r\n                            Sio.sendMessage(\"t_exec_i\", {\r\n                                tag: `${currentWindowElement.containerName}_command`,\r\n                                cmd: `docker stop ${currentWindowElement.containerName}`\r\n                            });\r\n\r\n                            this.elementStatusList[currentWindowElement.containerName].innerHTML = \"Stopping...\";\r\n                            this.commandStatusList[currentWindowElement.containerName] = index;\r\n                        }\r\n\r\n                        Sio.readMessage(`t_exec_o_${currentWindowElement.containerName}_command`, (data) => {\r\n                            if (data.close !== undefined) {\r\n                                Sio.stopRead(`t_exec_o_${currentWindowElement.containerName}_command`);\r\n\r\n                                if (this.commandStatusList[currentWindowElement.containerName] === 2)\r\n                                    this.elementStatusList[currentWindowElement.containerName].innerHTML = \"Stopped.\";\r\n\r\n                                this.commandStatusList[currentWindowElement.containerName] = -1;\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            },\r\n            close(windowComponent) {\r\n                const currentWindowElement = this._currentWindowElement(windowComponent);\r\n\r\n                if (currentWindowElement !== null && currentWindowElement.containerName !== null) {\r\n                    Sio.stopRead(`t_exec_o_${currentWindowElement.containerName}_status`);\r\n\r\n                    clearInterval(this.intervalStatusList[currentWindowElement.containerName]);\r\n\r\n                    delete this.windowComponentList[currentWindowElement.containerName];\r\n                    delete this.buttonCommandList[currentWindowElement.containerName];\r\n                    delete this.intervalStatusList[currentWindowElement.containerName];\r\n                    delete this.elementStatusList[currentWindowElement.containerName];\r\n                    delete this.commandStatusList[currentWindowElement.containerName];\r\n                }\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                windowComponentList: [],\r\n                buttonCommandList: [],\r\n                intervalStatusList: [],\r\n                elementStatusList: [],\r\n                commandStatusList: []\r\n            };\r\n        },\r\n        created() {\r\n            this.$root.$refs.containerCommandComponent = this;\r\n        },\r\n        beforeDestroy() {}\r\n    }\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n    .command_component {\r\n        display: block;\r\n        position: absolute;\r\n        top: 28px;\r\n        bottom: 0;\r\n        left: 0;\r\n        right: 0;\r\n        padding: 10px;\r\n\r\n        .section {\r\n            margin-bottom: 20px;\r\n\r\n            .left {\r\n                display: inline-block;\r\n                width: 70%;\r\n            }\r\n\r\n            .right {\r\n                display: inline-block;\r\n                width: 30%;\r\n                text-align: center;\r\n            }\r\n        }\r\n    }\r\n</style>"]}]}