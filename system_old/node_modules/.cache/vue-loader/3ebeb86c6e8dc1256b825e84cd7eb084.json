{"remainingRequest":"/home/user_1/root/system/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/user_1/root/system/src/components/ContainerTerminal.vue?vue&type=style&index=0&id=0f4f8827&lang=scss&scoped=true&","dependencies":[{"path":"/home/user_1/root/system/src/components/ContainerTerminal.vue","mtime":1612800757210},{"path":"/home/user_1/root/system/node_modules/css-loader/dist/cjs.js","mtime":1612517736416},{"path":"/home/user_1/root/system/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1612802232969},{"path":"/home/user_1/root/system/node_modules/postcss-loader/src/index.js","mtime":1612517736814},{"path":"/home/user_1/root/system/node_modules/sass-loader/dist/cjs.js","mtime":1612517748789},{"path":"/home/user_1/root/system/node_modules/cache-loader/dist/cjs.js","mtime":1612517717532},{"path":"/home/user_1/root/system/node_modules/vue-loader/lib/index.js","mtime":1612802232969}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi50ZXJtaW5hbF9jb250YWluZXJfY29tcG9uZW50IHsKICAgIGRpc3BsYXk6IG5vbmU7CiAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICB0b3A6IDI5cHg7CiAgICBib3R0b206IDA7CiAgICBsZWZ0OiAwOwogICAgcmlnaHQ6IDA7CiAgICBwYWRkaW5nOiAwOwp9Cg=="},{"version":3,"sources":["ContainerTerminal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ContainerTerminal.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <div class=\"terminal_container_component\"></div>\r\n</template>\r\n\r\n<script>\r\n    import Helper from \"@/assets/js/Helper.js\";\r\n    import Sio from \"@/assets/js/Sio.js\";\r\n\r\n    import {Terminal} from \"xterm\";\r\n    import {FitAddon} from \"xterm-addon-fit\";\r\n    import \"xterm/css/xterm.css\";\r\n\r\n    export default {\r\n        name: \"ContainerTerminalComponent\",\r\n        //components: {},\r\n        computed: {},\r\n        methods: {\r\n            _findParent: Helper.findParent,\r\n            _currentWindowElement: Helper.currentWindowElement,\r\n            _createXterm(windowComponent, currentWindowElement) {\r\n                const terminalComponent = windowComponent.querySelector(\".terminal_container_component\");\r\n\r\n                this.xtermList[currentWindowElement.containerName] = new Terminal({\r\n                    cursorBlink: true\r\n                });\r\n                this.fitAddonList[currentWindowElement.containerName] = new FitAddon();\r\n                this.xtermList[currentWindowElement.containerName].loadAddon(this.fitAddonList[currentWindowElement.containerName]);\r\n                this.xtermList[currentWindowElement.containerName].open(terminalComponent);\r\n                this.xtermList[currentWindowElement.containerName].focus();\r\n\r\n                const clientRect = terminalComponent.getBoundingClientRect();\r\n                const terminal = terminalComponent.querySelector(\".terminal.xterm\");\r\n                terminal.style.height = `${clientRect.height}px`;\r\n\r\n                this.fitAddonList[currentWindowElement.containerName].fit();\r\n                const size = this.fitAddonList[currentWindowElement.containerName].proposeDimensions();\r\n\r\n                Sio.sendMessage(\"t_pty_start\", {\r\n                    tag: currentWindowElement.containerName,\r\n                    size: [size.cols, size.rows]\r\n                });\r\n\r\n                if (currentWindowElement.name !== \"NodeJs\") {\r\n                    Sio.sendMessage(\"t_pty_i\", {\r\n                        tag: currentWindowElement.containerName,\r\n                        cmd: `history -c && history -w && clear && docker exec -it ${currentWindowElement.containerName} /bin/bash\\r`\r\n                    });\r\n                }\r\n\r\n                Sio.sendMessage(\"t_pty_i\", {\r\n                    tag: currentWindowElement.containerName,\r\n                    cmd: `history -c && history -w && clear\\r`\r\n                });\r\n\r\n                this.xtermList[currentWindowElement.containerName].onData((data) => {\r\n                    Sio.sendMessage(\"t_pty_i\", {\r\n                        tag: currentWindowElement.containerName,\r\n                        cmd: data\r\n                    });\r\n                });\r\n\r\n                Sio.readMessage(`t_pty_o_${currentWindowElement.containerName}`, (data) => {\r\n                    if (terminal !== null) {\r\n                        if (data.cmd.indexOf(\" is not running\") !== -1) {\r\n                            this._removeXterm(terminal, currentWindowElement);\r\n\r\n                            return;\r\n                        }\r\n\r\n                        if (data.cmd.indexOf(\"\\u0007\") === -1 && (data.cmd.trim() === \"exit\" || data.cmd.trim() === \"xterm_reset\")) {\r\n                            Sio.stopRead(`t_pty_o_${currentWindowElement.containerName}`);\r\n\r\n                            this._removeXterm(terminal, currentWindowElement);\r\n\r\n                            this._createXterm(windowComponent, currentWindowElement);\r\n                        }\r\n                        else {\r\n                            if (this.xtermList[data.tag] !== undefined && data.tag !== undefined && data.cmd !== undefined)\r\n                                this.xtermList[data.tag].write(data.cmd);\r\n                        }\r\n                    }\r\n                });\r\n            },\r\n            _removeXterm(terminal, currentWindowElement) {\r\n                Sio.stopRead(`t_pty_o_${currentWindowElement.containerName}`);\r\n\r\n                Sio.sendMessage(\"t_pty_close\", {tag: currentWindowElement.containerName});\r\n\r\n                delete this.xtermList[currentWindowElement.containerName];\r\n                delete this.fitAddonList[currentWindowElement.containerName];\r\n\r\n                terminal.remove();\r\n            },\r\n            init(windowComponent) {\r\n                const currentWindowElement = this._currentWindowElement(windowComponent);\r\n\r\n                if (currentWindowElement !== null) {\r\n                    const terminal = windowComponent.querySelector(\".terminal.xterm\");\r\n\r\n                    if (terminal === null)\r\n                        this._createXterm(windowComponent, currentWindowElement);\r\n                }\r\n            },\r\n            clickLogic(event) {\r\n                const windowComponent = this._findParent(event.target, ['terminal_container_component'], [\"window_component\"]);\r\n                const currentWindowElement = this._currentWindowElement(windowComponent);\r\n\r\n                if (currentWindowElement !== null && this.xtermList[currentWindowElement.containerName] !== undefined)\r\n                    this.xtermList[currentWindowElement.containerName].focus();\r\n            },\r\n            resizeLogic() {\r\n                const terminalComponentList = document.querySelectorAll(\".terminal_container_component\");\r\n\r\n                for (const value of terminalComponentList) {\r\n                    const windowComponent = this._findParent(value, [\"window_component\"]);\r\n                    const currentWindowElement = this._currentWindowElement(windowComponent);\r\n\r\n                    if (currentWindowElement !== null) {\r\n                        const terminal = value.querySelector(\".terminal.xterm\");\r\n\r\n                        if (terminal !== null && this.fitAddonList[currentWindowElement.containerName] !== undefined) {\r\n                            const clientRect = value.getBoundingClientRect();\r\n                            terminal.style.height = `${clientRect.height}px`;\r\n\r\n                            this.fitAddonList[currentWindowElement.containerName].fit();\r\n\r\n                            const size = this.fitAddonList[currentWindowElement.containerName].proposeDimensions();\r\n\r\n                            Sio.sendMessage(\"t_pty_resize\", {\r\n                                tag: currentWindowElement.containerName,\r\n                                size: [size.cols, size.rows]\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            close(windowComponent) {\r\n                const currentWindowElement = this._currentWindowElement(windowComponent);\r\n\r\n                if (currentWindowElement !== null && currentWindowElement.containerName !== null) {\r\n                    Sio.stopRead(`t_pty_o_${currentWindowElement.containerName}`);\r\n\r\n                    Sio.sendMessage(\"t_pty_close\", {tag: currentWindowElement.containerName});\r\n\r\n                    delete this.xtermList[currentWindowElement.containerName];\r\n                    delete this.fitAddonList[currentWindowElement.containerName];\r\n                }\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                xtermList: [],\r\n                fitAddonList: []\r\n            };\r\n        },\r\n        created() {\r\n            this.$root.$refs.containerTerminalComponent = this;\r\n        },\r\n        beforeDestroy() {}\r\n    }\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n    .terminal_container_component {\r\n        display: none;\r\n        position: absolute;\r\n        top: 29px;\r\n        bottom: 0;\r\n        left: 0;\r\n        right: 0;\r\n        padding: 0;\r\n    }\r\n</style>\r\n"]}]}